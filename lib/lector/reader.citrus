grammar Lector::RubyParse

  include Lector::Digits

  rule ruby_data
    (space* form space*) <Lector::Types::Data>
  end

  rule form
    array | hash | literal
  end

  rule literal
    nil | boolean | string | code | symbol | hashkey | number
  end

  rule nil
    "nil" <Lector::Types::Nil>
  end

  rule boolean
    ("true" | "false") <Lector::Types::Boolean>
  end

  rule string
    single_quoted_string | double_quoted_string
  end

  rule double_quoted_string
    ("\"" content:(/[^"\\]/ | /\\./)* "\"") <Lector::Types::String>
  end

  rule single_quoted_string
    ("'" content:(/[^'\\]/ | /\\./)* "'") <Lector::Types::String>
  end

  rule code
    ("#=" string) <Lector::Types::Code>
  end

  rule symbol
    simple_symbol | string_symbol
  end

  rule simple_symbol
    (":" symbol_content) <Lector::Types::SimpleSymbol>
  end

  rule symbol_content
    /[a-zA-Z!_][a-zA-Z0-9_]*[\?!]?/
  end

  rule string_symbol
    (":" string) <Lector::Types::StringSymbol>
  end

  rule number
    hex_integer | float | integer | octal_integer
  end

  rule integer
    ([+-]? ('0' | nonzero digit*)) <Lector::Types::Integer>
  end

  rule hex_integer
    ([+-]? `0x` hexdigit+) <Lector::Types::HexInteger>
  end

  rule octal_integer
    ([+-]? '0' octaldigit+) <Lector::Types::OctalInteger>
  end

  rule float
    (integer '.' digit+ (`e` integer)?
     | integer `e` integer) <Lector::Types::Float>
  end

  rule array
    ('['
     ((space* form space* ',')* (space* form space*)?)
     ']') <Lector::Types::Array>
  end

  rule hash
    #TODO: Spurious commas should be parse errors.
    ('{'
     (((space* form space* '=>' space* form space* ',') |
       (space* form ':' space* form space* ','))*
      ((space* form space* '=>' space* form space*) |
       (space* form ':' space* form space*)))
     '}') <Lector::Types::Hash>
  end

  rule hashkey
    #TODO: Kludge - this shouldn't be a standalone terminal.
    symbol_content <Lector::Types::HashKey>
  end

  rule space [ \t\n\r] end

end
